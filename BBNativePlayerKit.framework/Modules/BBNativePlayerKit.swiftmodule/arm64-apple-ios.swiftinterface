// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BBNativePlayerKit
import AVFoundation
import AVKit
@_exported import BBNativePlayerKit
import Foundation
import GoogleInteractiveMediaAds
import Swift
import UIKit
import shared
extension BBNativePlayerView {
  public func load(contentId: Swift.String, contentIndicator: Swift.String?, initiator: Swift.String?, autoPlay: Swift.Bool?, seekPosition: Swift.Int?)
  public func play()
  public func pause()
  public func seek(positionInSeconds: Swift.Int)
  public func setProgramVolume(volume: Swift.Float)
  public func setFitMode(fitMode: shared.FitMode)
  public func getAssets() -> Swift.Array<shared.MediaAsset>?
  public func getClipData() -> shared.MediaClip?
  public func getCurrentAsset() -> shared.MediaAsset?
  public func getCurrentTime() -> Swift.Int?
  public func getDeeplink() -> Swift.String?
  public func getDuration() -> Swift.Double?
  public func getMuted() -> Swift.Bool?
  public func getPhase() -> shared.Phase?
  public func isPlaying() -> Swift.Bool?
  public func getPlayoutData() -> shared.Playout?
  public func getProjectData() -> shared.Project?
  public func getThumbnailUrlString(clipId: Swift.String, width: Swift.Int?, height: Swift.Int?) -> Swift.String?
  public func getVolume() -> Swift.Float?
}
@objc public protocol BBNativePlayerViewDelegate {
  @objc optional func didLoadEmbedData(data: shared.EmbedObject)
  @objc optional func didLoadMediaClipData(data: shared.MediaClip)
  @objc optional func didLoadProjectData(data: shared.Project)
  @objc optional func didTriggerCanplay()
  @objc optional func didTriggerPlay()
  @objc optional func didTriggerPause()
  @objc optional func didTriggerPlaying()
  @objc optional func didTriggerSeeking()
  @objc optional func didTriggerSeek()
  @objc optional func didTriggerEnd()
  @objc optional func didTriggerStart()
  @objc optional func didTriggerStall()
  @objc optional func didTriggerProgress()
  @objc optional func didTriggerError(error: Swift.Error?)
  @objc optional func didTriggerAdError(error: Swift.Error?)
}
extension BBNativePlayerView : shared.EventListenerInterface {
  @objc dynamic public func onEvent(eventType: shared.EventName, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBNativePlayerView : UIKit.UIView {
  public var delegate: BBNativePlayerKit.BBNativePlayerViewDelegate?
  public var nativeControls: Swift.Bool {
    get
    set
  }
  public func presentModal(uiViewContoller: UIKit.UIViewController, animated: Swift.Bool)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public func removeFromSuperview()
  public func __destruct()
  @objc deinit
}
extension BBNativePlayerView : AVKit.AVPlayerViewControllerDelegate {
}
public class BBNativePlayer {
  public init()
  public static func createPlayerView(frame: CoreGraphics.CGRect, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativePlayerView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBNativePlayerViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  public func __destruct()
  @objc deinit
}
extension UIColor {
  convenience public init?(hex: Swift.String)
}
extension UIView {
  public func isVisible() -> Swift.Bool
}
