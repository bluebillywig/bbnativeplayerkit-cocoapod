// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BBNativePlayerKit
import AVFoundation
import AVKit
@_exported import BBNativePlayerKit
import Foundation
import GoogleInteractiveMediaAds
import Swift
import UIKit
import bbnativeshared
import os
extension BBNativePlayerView {
  public func callApiMethod(method: bbnativeshared.ApiMethod, args: [Swift.String : Any?]?)
  public func setApiProperty(property: bbnativeshared.ApiProperty, value: Any?)
  public func getApiProperty(property: bbnativeshared.ApiProperty) -> Any?
  public func destroy()
}
@objc public protocol BBNativePlayerViewDelegate {
  @objc optional func didSetupWithJsonUrl(url: Swift.String?)
  @objc optional func didFailWithError(error: Swift.String?)
  @objc optional func didTriggerMediaClipLoaded(data: bbnativeshared.MediaClip)
  @objc optional func didTriggerViewStarted()
  @objc optional func didTriggerViewFinished()
  @objc optional func didTriggerProjectLoaded(data: bbnativeshared.Project)
  @objc optional func didTriggerCanPlay()
  @objc optional func didTriggerDurationChange(duration: Swift.Double)
  @objc optional func didTriggerPlay()
  @objc optional func didTriggerPause()
  @objc optional func didTriggerAutoPause()
  @objc optional func didTriggerAutoPausePlay()
  @objc optional func didTriggerPlaying()
  @objc optional func didTriggerEnded()
  @objc optional func didTriggerSeeking()
  @objc optional func didTriggerSeeked(seekOffset: Swift.Double)
  @objc optional func didTriggerStall()
  @objc optional func didTriggerMediaClipFailed()
  @objc optional func didTriggerAdError(error: Swift.String?)
  @objc optional func didTriggerPhaseChange(phase: bbnativeshared.Phase?)
  @objc optional func didTriggerStateChange(state: bbnativeshared.State?)
  @objc optional func didTriggerModeChange(mode: Swift.String?)
  @objc optional func didRequestOpenUrl(url: Swift.String?)
}
extension BBNativePlayerView : bbnativeshared.EventListenerInterface {
  @objc dynamic public func onEvent(eventType: bbnativeshared.EventName, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBNativePlayerView : UIKit.UIView {
  public var delegate: BBNativePlayerKit.BBNativePlayerViewDelegate?
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
extension BBNativePlayerView : AVKit.AVPlayerViewControllerDelegate {
  @objc dynamic public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_hasMissingDesignatedInitializers public class BBNativePlayer {
  public static func createPlayerView(frame: CoreGraphics.CGRect, jsonUrl: Swift.String, options: [Swift.String : Any]?) -> BBNativePlayerKit.BBNativePlayerView
  public static func createPlayerView(frame: CoreGraphics.CGRect, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativePlayerView
  public static func createModalPlayerView(uiViewContoller: UIKit.UIViewController, jsonUrl: Swift.String, options: [Swift.String : Any]?)
  public static func createModalPlayerView(uiViewContoller: UIKit.UIViewController, jsonUrl: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBNativePlayerViewController : UIKit.UIViewController {
  public var inViewController: bbnativeshared.InViewController?
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  public func __destruct()
  @objc deinit
}
extension UIColor {
  convenience public init?(hex: Swift.String)
}
extension UIView {
  public func isVisible() -> Swift.Bool
}
