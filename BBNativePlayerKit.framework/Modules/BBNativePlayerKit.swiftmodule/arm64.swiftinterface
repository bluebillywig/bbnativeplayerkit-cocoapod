// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BBNativePlayerKit
import AVFoundation
import AVKit
@_exported import BBNativePlayerKit
import Foundation
import GoogleInteractiveMediaAds
import Swift
import UIKit
import bbnativeshared
import os
extension BBNativePlayerView {
  public func callApiMethod(method: bbnativeshared.ApiMethod, args: [Swift.String : Any?]?)
  public func setApiProperty(property: bbnativeshared.ApiProperty, value: Any?)
  public func getApiProperty(property: bbnativeshared.ApiProperty) -> Any?
  public func destroy()
}
@objc public protocol BBNativePlayerViewDelegate {
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didSetupWithJsonUrl url: Swift.String?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didFailWithError error: Swift.String?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerMediaClipLoaded data: bbnativeshared.MediaClip)
  @objc optional func bbNativePlayerView(didTriggerViewStarted playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerViewFinished playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerProjectLoaded data: bbnativeshared.Project)
  @objc optional func bbNativePlayerView(didTriggerCanPlay playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerDurationChange duration: Swift.Double)
  @objc optional func bbNativePlayerView(didTriggerPlay playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerPause playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAutoPause playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAutoPausePlay playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerPlaying playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerEnded playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerSeeking playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerSeeked seekOffset: Swift.Double)
  @objc optional func bbNativePlayerView(didTriggerStall playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerMediaClipFailed playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerPhaseChange phase: bbnativeshared.Phase?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerStateChange state: bbnativeshared.State?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerModeChange mode: Swift.String?)
  @objc optional func bbNativePlayerView(didRequestCollapse playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didRequestExpand playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdLoaded playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdNotFound playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerAdError error: Swift.String?)
  @objc optional func bbNativePlayerView(didTriggerAdStarted playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdQuartile1 playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdQuartile2 playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdQuartile3 playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdFinished playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAllAdsCompleted playerView: BBNativePlayerKit.BBNativePlayerView)
}
extension BBNativePlayerView : bbnativeshared.EventListenerInterface {
  @objc dynamic public func onEvent(eventType: bbnativeshared.EventName, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBNativePlayerView : UIKit.UIView {
  weak public var delegate: BBNativePlayerKit.BBNativePlayerViewDelegate?
  public var player: BBNativePlayerKit.BBNativePlayerAPI
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
extension BBNativePlayerView : AVKit.AVPlayerViewControllerDelegate {
  @objc dynamic public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@_hasMissingDesignatedInitializers public class BBNativePlayerAPI {
  public func loadWithClipId(clipId: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithClipListId(clipListId: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithProjectId(projectId: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithClipJson(clipJson: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithClipListJson(clipListJson: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithProjectJson(projectJson: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func play()
  public func pause()
  public func seek(offsetInSeconds: Foundation.NSNumber)
  public func autoPlayNextCancel()
  public func collapse()
  public func expand()
  public var phase: bbnativeshared.Phase? {
    get
  }
  public var state: bbnativeshared.State? {
    get
  }
  public var mode: Swift.String? {
    get
  }
  public var playoutData: bbnativeshared.Playout? {
    get
  }
  public var projectData: bbnativeshared.Project? {
    get
  }
  public var clipData: bbnativeshared.MediaClip? {
    get
  }
  public var volume: Swift.Float? {
    get
    set
  }
  public var muted: Swift.Bool? {
    get
    set
  }
  public var inView: Swift.Bool? {
    get
    set
  }
  public var duration: Swift.Double? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BBNativePlayer {
  public static func createPlayerView(frame: CoreGraphics.CGRect, jsonUrl: Swift.String, options: [Swift.String : Any]?) -> BBNativePlayerKit.BBNativePlayerView
  public static func createPlayerView(frame: CoreGraphics.CGRect, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativePlayerView
  public static func createModalPlayerView(uiViewContoller: UIKit.UIViewController, jsonUrl: Swift.String, options: [Swift.String : Any]?) -> BBNativePlayerKit.BBNativePlayerView
  public static func createModalPlayerView(uiViewContoller: UIKit.UIViewController, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativePlayerView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBNativePlayerViewController : UIKit.UIViewController {
  public var inViewController: bbnativeshared.InViewController?
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  public func __destruct()
  @objc deinit
}
extension UIColor {
  convenience public init?(hex: Swift.String)
}
extension UIView {
  public func isVisible() -> Swift.Bool
}
