// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BBNativePlayerKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
@_exported import BBNativePlayerKit
import DeveloperToolsSupport
import Foundation
import GoogleCast
import GoogleInteractiveMediaAds
import Swift
import SwiftUI
import UIKit.UIDevice
import UIKit
import UserMessagingPlatform
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import bbnativeshared
import os
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BBNativePlayerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency weak public var inViewController: bbnativeshared.InViewController?
  @_Concurrency.MainActor @preconcurrency weak public var chromeCastViewController: BBNativePlayerKit.ChromeCastViewController?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func __destruct()
  @objc deinit
}
extension BBNativePlayerKit.BBNativePlayerViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension BBNativePlayerKit.BBNativePlayerViewController : bbnativeshared.EventListenerInterface {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onEvent(eventType: bbnativeshared.EventName, data: [Swift.String : Any]?)
}
extension BBNativePlayerKit.BBNativePlayerView {
  @_Concurrency.MainActor @preconcurrency public func callApiMethod(method: bbnativeshared.ApiMethod, args: [Swift.String : Any?]?)
  @_Concurrency.MainActor @preconcurrency public func setApiProperty(property: bbnativeshared.ApiProperty, value: Any?)
  @_Concurrency.MainActor @preconcurrency public func getApiProperty(property: bbnativeshared.ApiProperty) -> Any?
  @_Concurrency.MainActor @preconcurrency public func destroy()
}
@objc public protocol BBNativePlayerViewDelegate {
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didSetupWithJsonUrl url: Swift.String?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didFailWithError error: Swift.String?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerMediaClipLoaded data: bbnativeshared.MediaClip)
  @objc optional func bbNativePlayerView(didTriggerViewStarted playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerViewFinished playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerProjectLoaded data: bbnativeshared.Project)
  @objc optional func bbNativePlayerView(didTriggerCanPlay playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerDurationChange duration: Swift.Double)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerVolumeChange volume: Swift.Double)
  @objc optional func bbNativePlayerView(didTriggerPlay playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerPause playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAutoPause playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAutoPausePlay playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerPlaying playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerEnded playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerSeeking playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerSeeked seekOffset: Swift.Double)
  @objc optional func bbNativePlayerView(didTriggerStall playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerMediaClipFailed playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerPhaseChange phase: bbnativeshared.Phase?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerStateChange state: bbnativeshared.State?)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerModeChange mode: Swift.String?)
  @objc optional func bbNativePlayerView(didTriggerFullscreen playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerRetractFullscreen playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerCustomStatistics ident: Swift.String, ev: Swift.String, aux: [Swift.String : Swift.String])
  @objc optional func bbNativePlayerView(didRequestCollapse playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didRequestExpand playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdLoaded playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdNotFound playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerAdError error: Swift.String?)
  @objc optional func bbNativePlayerView(didTriggerAdStarted playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdQuartile1 playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdQuartile2 playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdQuartile3 playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdFinished playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAllAdsCompleted playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didTriggerResize width: Swift.Int, height: Swift.Int)
  @objc optional func bbNativePlayerView(didTriggerAdSwipeLeft playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdSwipeRight playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdSwipeUp playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerAdSwipeDown playerView: BBNativePlayerKit.BBNativePlayerView)
  @objc optional func bbNativePlayerView(didTriggerUIPanGesture playerView: BBNativePlayerKit.BBNativePlayerView, translation: CoreFoundation.CGPoint, velocity: CoreFoundation.CGPoint, location: CoreFoundation.CGPoint, state: UIKit.UIGestureRecognizer.State)
}
extension BBNativePlayerKit.BBNativePlayerView : bbnativeshared.EventListenerInterface {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onEvent(eventType: bbnativeshared.EventName, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BBNativePlayerView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any BBNativePlayerKit.BBNativePlayerViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public var player: BBNativePlayerKit.BBNativePlayerAPI
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSublayers(of layer: QuartzCore.CALayer)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
extension BBNativePlayerKit.BBNativePlayerView : AVKit.AVPlayerViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
extension BBNativePlayerKit.BBNativePlayerView : AVKit.AVRoutePickerViewDelegate {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BBNativeShortsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func __destruct()
  @objc deinit
}
extension BBNativePlayerKit.BBNativeShortsViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension BBNativePlayerKit.BBNativeShortsViewController : bbnativeshared.EventListenerInterface {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onEvent(eventType: bbnativeshared.EventName, data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BBNativeShortsView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any BBNativePlayerKit.BBNativeShortsViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public func destroy()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc deinit
}
extension BBNativePlayerKit.BBNativeShortsView : bbnativeshared.EventListenerInterface {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onEvent(eventType: bbnativeshared.EventName, data: [Swift.String : Any]?)
}
extension BBNativePlayerKit.BBNativeShortsView : BBNativePlayerKit.BBNativePlayerViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func bbNativePlayerView(playerView: BBNativePlayerKit.BBNativePlayerView, didSetupWithJsonUrl url: Swift.String?)
}
@_hasMissingDesignatedInitializers public class BBNativePlayerAPI {
  public func closeModalPlayer()
  public func getModalPlayerView() -> UIKit.UIView?
  public func loadWithClipId(clipId: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithClipListId(clipListId: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithProjectId(projectId: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithClipJson(clipJson: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithClipListJson(clipListJson: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func loadWithProjectJson(projectJson: Swift.String, initiator: Swift.String? = "external", autoPlay: Swift.Bool? = true, seekTo: Foundation.NSNumber? = nil)
  public func play()
  public func pause()
  public func seek(offsetInSeconds: Foundation.NSNumber)
  public func autoPlayNextCancel()
  public func collapse()
  public func expand()
  public func enterFullScreen()
  public func exitFullScreen()
  public var phase: bbnativeshared.Phase? {
    get
  }
  public var state: bbnativeshared.State? {
    get
  }
  public var mode: Swift.String? {
    get
  }
  public var playoutData: bbnativeshared.Playout? {
    get
  }
  public var projectData: bbnativeshared.Project? {
    get
  }
  public var clipData: bbnativeshared.MediaClip? {
    get
  }
  public var relatedItems: [any bbnativeshared.ContentItemInterface]? {
    get
    set
  }
  public var volume: Swift.Float? {
    get
    set
  }
  public func setVolume(volume: Swift.Double, userAction: Swift.Bool = false)
  public var muted: Swift.Bool? {
    get
    set
  }
  public func setMuted(muted: Swift.Bool, userAction: Swift.Bool = false)
  public var inView: Swift.Bool? {
    get
    set
  }
  public var duration: Swift.Double? {
    get
  }
  public var createChromeCastButton: GoogleCast.GCKUICastButton? {
    get
  }
  public var getChromeCastMiniControlsView: UIKit.UIView? {
    get
  }
  public var adMediaWidth: Swift.Int? {
    get
  }
  public var adMediaHeight: Swift.Int? {
    get
  }
  public var fullscreen: Swift.Bool? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChromeCastHelper {
  public static let shared: BBNativePlayerKit.ChromeCastHelper
  public var initialized: Swift.Bool
  public func createChromeCastButton(frame: CoreFoundation.CGRect) -> GoogleCast.GCKUICastButton?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BBNativePlayer {
  public static func createPlayerView(uiViewController: UIKit.UIViewController, frame: CoreFoundation.CGRect, jsonUrl: Swift.String, options: [Swift.String : Any]?) -> BBNativePlayerKit.BBNativePlayerView
  public static func createPlayerView(uiViewController: UIKit.UIViewController, frame: CoreFoundation.CGRect, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativePlayerView
  public static func createModalPlayerView(uiViewContoller: UIKit.UIViewController, jsonUrl: Swift.String, options: [Swift.String : Any]?) -> BBNativePlayerKit.BBNativePlayerView
  public static func createModalPlayerView(uiViewContoller: UIKit.UIViewController, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativePlayerView
  public static func createJsonEmbedUrl(baseUrl: Swift.String, appIndicator: Swift.String, appId: Swift.String, contentIndicator: Swift.String? = nil, contentId: Swift.String? = nil) -> Swift.String
  @objc deinit
}
@objc public protocol BBNativeShortsViewDelegate {
  @objc optional func bbNativeShortsView(shortsView: BBNativePlayerKit.BBNativeShortsView, didSetupWithJsonUrl url: Swift.String?)
  @objc optional func bbNativeShortsView(shortsView: BBNativePlayerKit.BBNativeShortsView, didFailWithError error: Swift.String?)
  @objc optional func bbNativeShortsView(shortsView: BBNativePlayerKit.BBNativeShortsView, didTriggerResize width: Swift.Int, height: Swift.Int)
}
@_hasMissingDesignatedInitializers public class BBNativeShorts {
  public static func createShortsView(uiViewController: UIKit.UIViewController, frame: CoreFoundation.CGRect, jsonUrl: Swift.String, options: [Swift.String : Any]?) -> BBNativePlayerKit.BBNativeShortsView
  public static func createShortsView(uiViewController: UIKit.UIViewController, frame: CoreFoundation.CGRect, jsonUrl: Swift.String) -> BBNativePlayerKit.BBNativeShortsView
  public static func createJsonEmbedUrl(baseUrl: Swift.String, appIndicator: Swift.String, appId: Swift.String, contentIndicator: Swift.String? = nil, contentId: Swift.String? = nil) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MediaViewController) @_Concurrency.MainActor @preconcurrency public class ChromeCastViewController : UIKit.UIViewController, GoogleCast.GCKSessionManagerListener, GoogleCast.GCKRemoteMediaClientListener, GoogleCast.GCKLoggerDelegate, GoogleCast.GCKRequestDelegate, GoogleCast.GCKUIMiniMediaControlsViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any BBNativePlayerKit.ChromeCastViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency public var sessionManager: GoogleCast.GCKSessionManager!
  @_Concurrency.MainActor @preconcurrency public var castButton: GoogleCast.GCKUICastButton!
  @_Concurrency.MainActor @preconcurrency public var miniMediaControlsContainerView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency public var miniMediaControlsUsedExternaly: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func enable(showMiniControls: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func disable()
  @_Concurrency.MainActor @preconcurrency public func pauseCastSession()
  @_Concurrency.MainActor @preconcurrency public func resumeCastSession()
  @_Concurrency.MainActor @preconcurrency public func checkRunningSession()
  @_Concurrency.MainActor @preconcurrency public func setIgnoreCastUI(to: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func hasActivePlayingSession() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func __destruct()
  @_Concurrency.MainActor @preconcurrency public func play()
  @_Concurrency.MainActor @preconcurrency public func pause()
  @_Concurrency.MainActor @preconcurrency public func seekTo(time: Swift.Double)
  @_Concurrency.MainActor @preconcurrency public func mute()
  @_Concurrency.MainActor @preconcurrency public func unMute()
  @_Concurrency.MainActor @preconcurrency public func setMessageLabel(deviceName: Swift.String?, isThisPlayer: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func sessionManager(_: GoogleCast.GCKSessionManager, didStart session: GoogleCast.GCKSession)
  @_Concurrency.MainActor @preconcurrency @objc public func sessionManager(_: GoogleCast.GCKSessionManager, didResumeSession session: GoogleCast.GCKSession)
  @_Concurrency.MainActor @preconcurrency @objc public func sessionManager(_: GoogleCast.GCKSessionManager, didEnd _: GoogleCast.GCKSession, withError error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc public func sessionManager(_: GoogleCast.GCKSessionManager, didStart session: GoogleCast.GCKCastSession)
  @_Concurrency.MainActor @preconcurrency @objc public func logMessage(_ message: Swift.String, at level: GoogleCast.GCKLoggerLevel, fromFunction function: Swift.String, location: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func requestDidComplete(_ request: GoogleCast.GCKRequest)
  @_Concurrency.MainActor @preconcurrency @objc public func miniMediaControlsViewController(_ miniMediaControlsViewController: GoogleCast.GCKUIMiniMediaControlsViewController, shouldAppear: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func remoteMediaClient(_: GoogleCast.GCKRemoteMediaClient, didUpdate mediaStatus: GoogleCast.GCKMediaStatus?)
  @_Concurrency.MainActor @preconcurrency public func playerIsModal()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public protocol ChromeCastViewControllerDelegate {
  @objc func chromeCastViewController(chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, sessionStarted session: GoogleCast.GCKSession)
  @objc func chromeCastViewController(chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, sessionResumed session: GoogleCast.GCKSession)
  @objc func chromeCastViewController(chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, sessionEnded resumeInAVPlayer: Swift.Bool, withError: (any Swift.Error)?)
  @objc func chromeCastViewController(chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, sessionFailedToStart withError: (any Swift.Error)?)
  @objc func chromeCastViewController(chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, sessionFailedToResume withError: (any Swift.Error)?)
  @objc func chromeCastViewController(mediaStatusStarted chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, sessionId: Swift.String)
  @objc func chromeCastViewController(mediaStatusFinished chromeCastViewController: BBNativePlayerKit.ChromeCastViewController)
  @objc func chromeCastViewController(mediaStatusError chromeCastViewController: BBNativePlayerKit.ChromeCastViewController)
  @objc func chromeCastViewController(mediaStatusPlaying chromeCastViewController: BBNativePlayerKit.ChromeCastViewController)
  @objc func chromeCastViewController(mediaStatusPaused chromeCastViewController: BBNativePlayerKit.ChromeCastViewController)
  @objc func chromeCastViewController(chromeCastViewController: BBNativePlayerKit.ChromeCastViewController, mediaProgress position: Swift.Float)
  @objc func chromeCastViewController(didRequestDirectCast chromeCastViewController: BBNativePlayerKit.ChromeCastViewController)
}
